{"ast":null,"code":"import React,{useState,useEffect,useContext}from'react';import{Context}from'../../Context/Context';import{makeVerifyRequest}from'../../request/requset';import{Redirect}from'react-router-dom';export var UpdateLoggedin=function UpdateLoggedin(_ref){var page=_ref.page,children=_ref.children,history=_ref.history,isLoggedin=_ref.isLoggedin,location=_ref.location,match=_ref.match;var _useContext=useContext(Context),user=_useContext.user,Loggedin=_useContext.isLoggedin,Loading=_useContext.Loading,isLoggedinf=_useContext.isLoggedinf,setUser=_useContext.setUser,setLoadingf=_useContext.setLoadingf;var context=useContext(Context);var token=localStorage.getItem('auth_token');useEffect(function(){if(token){makeVerifyRequest('get',setUser,isLoggedinf,setLoadingf);}else{isLoggedinf(false);setLoadingf(false);}},[history.location.pathname]);switch(page){case'LOGİN':if(Loggedin&&isLoggedin){history.push('/home');}else{return children(context);}break;case'ADD_USER':// this is how I control  whether user is allowed to go into  the page or not\nif(user.role==='Bayi'){history.push('/home');}else{if(Loggedin||Loading)return children(Loading,user);else history.push('/');}break;default:if(Loggedin||Loading){return children(Loading,user);}else{history.push('/');}break;}return null;};export default React.memo(UpdateLoggedin);","map":{"version":3,"sources":["C:/Users/bexfg/Desktop/BOŞ/Study-Online/frontend/src/Containers/isLoggedin/action.js"],"names":["React","useState","useEffect","useContext","Context","makeVerifyRequest","Redirect","UpdateLoggedin","page","children","history","isLoggedin","location","match","user","Loggedin","Loading","isLoggedinf","setUser","setLoadingf","context","token","localStorage","getItem","pathname","push","role","memo"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAcC,QAAd,CAAuBC,SAAvB,CAAiCC,UAAjC,KAAkD,OAAlD,CACA,OAAQC,OAAR,KAAsB,uBAAtB,CACA,OAAQC,iBAAR,KAAgC,uBAAhC,CACA,OAAQC,QAAR,KAAwB,kBAAxB,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAqD,IAAnDC,CAAAA,IAAmD,MAAnDA,IAAmD,CAA9CC,QAA8C,MAA9CA,QAA8C,CAArCC,OAAqC,MAArCA,OAAqC,CAA7BC,UAA6B,MAA7BA,UAA6B,CAAlBC,QAAkB,MAAlBA,QAAkB,CAATC,KAAS,MAATA,KAAS,iBAEJV,UAAU,CAACC,OAAD,CAFN,CAExEU,IAFwE,aAExEA,IAFwE,CAExDC,QAFwD,aAEnEJ,UAFmE,CAE/CK,OAF+C,aAE/CA,OAF+C,CAEvCC,WAFuC,aAEvCA,WAFuC,CAE3BC,OAF2B,aAE3BA,OAF2B,CAEnBC,WAFmB,aAEnBA,WAFmB,CAG/E,GAAMC,CAAAA,OAAO,CAAGjB,UAAU,CAACC,OAAD,CAA1B,CACA,GAAMiB,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd,CAGArB,SAAS,CAAC,UAAI,CAEV,GAAGmB,KAAH,CACA,CACIhB,iBAAiB,CAAC,KAAD,CAAOa,OAAP,CAAeD,WAAf,CAA2BE,WAA3B,CAAjB,CACH,CAHD,IAKA,CACIF,WAAW,CAAC,KAAD,CAAX,CACAE,WAAW,CAAC,KAAD,CAAX,CACH,CAEJ,CAZQ,CAYP,CAACT,OAAO,CAACE,QAAR,CAAiBY,QAAlB,CAZO,CAAT,CAcA,OAAOhB,IAAP,EAEI,IAAK,OAAL,CAEA,GAAGO,QAAQ,EAAIJ,UAAf,CACA,CACID,OAAO,CAACe,IAAR,CAAa,OAAb,EACH,CAHD,IAKA,CACI,MAAOhB,CAAAA,QAAQ,CAACW,OAAD,CAAf,CACH,CAED,MAEA,IAAK,UAAL,CAAsB;AAEtB,GAAGN,IAAI,CAACY,IAAL,GAAc,MAAjB,CACA,CACIhB,OAAO,CAACe,IAAR,CAAa,OAAb,EACH,CAHD,IAKA,CACG,GAAGV,QAAQ,EAAIC,OAAf,CACE,MAAOP,CAAAA,QAAQ,CAACO,OAAD,CAASF,IAAT,CAAf,CADF,IAGEJ,CAAAA,OAAO,CAACe,IAAR,CAAa,GAAb,EACJ,CAED,MAEA,QAEI,GAAGV,QAAQ,EAAIC,OAAf,CACA,CACI,MAAOP,CAAAA,QAAQ,CAACO,OAAD,CAASF,IAAT,CAAf,CACH,CAHD,IAKA,CACIJ,OAAO,CAACe,IAAR,CAAa,GAAb,EACH,CAEL,MA1CJ,CA4CA,MAAO,KAAP,CACH,CAlEM,CAoEP,cAAezB,CAAAA,KAAK,CAAC2B,IAAN,CAAWpB,cAAX,CAAf","sourcesContent":["import React,{useState,useEffect,useContext} from 'react'\r\nimport {Context} from '../../Context/Context'\r\nimport {makeVerifyRequest} from '../../request/requset'\r\nimport {Redirect}  from 'react-router-dom'\r\n\r\nexport const UpdateLoggedin = ({page,children,history,isLoggedin,location,match})=>{\r\n\r\n    const {user,isLoggedin:Loggedin,Loading,isLoggedinf,setUser,setLoadingf} = useContext(Context)   \r\n    const context = useContext(Context);\r\n    const token = localStorage.getItem('auth_token');\r\n    \r\n\r\n    useEffect(()=>{\r\n        \r\n        if(token)\r\n        {\r\n            makeVerifyRequest('get',setUser,isLoggedinf,setLoadingf);\r\n        }\r\n        else\r\n        {\r\n            isLoggedinf(false);\r\n            setLoadingf(false);\r\n        }\r\n\r\n    },[history.location.pathname])\r\n    \r\n    switch(page)  \r\n    {\r\n        case 'LOGİN':\r\n\r\n        if(Loggedin && isLoggedin)\r\n        {\r\n            history.push('/home');\r\n        }\r\n        else\r\n        {\r\n            return children(context);\r\n        }   \r\n        \r\n        break ; \r\n\r\n        case 'ADD_USER':      // this is how I control  whether user is allowed to go into  the page or not\r\n\r\n        if(user.role === 'Bayi')\r\n        {\r\n            history.push('/home');\r\n        }\r\n        else\r\n        {\r\n           if(Loggedin || Loading)\r\n             return children(Loading,user);\r\n           else\r\n             history.push('/');\r\n        }\r\n\r\n        break;\r\n\r\n        default:\r\n            \r\n            if(Loggedin || Loading)\r\n            {\r\n                return children(Loading,user);\r\n            }\r\n            else\r\n            {\r\n                history.push('/');\r\n            }\r\n\r\n        break;   \r\n    }\r\n    return null;\r\n}\r\n\r\nexport default React.memo(UpdateLoggedin);"]},"metadata":{},"sourceType":"module"}