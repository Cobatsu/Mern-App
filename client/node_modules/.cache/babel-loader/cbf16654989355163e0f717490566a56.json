{"ast":null,"code":"import React, { useState, useEffect, useContext } from 'react';\nimport { Context } from '../../Context/Context';\nimport { makeVerifyRequest } from '../../request/requset';\nimport { Redirect } from 'react-router-dom';\nexport const UpdateLoggedin = ({\n  page,\n  children,\n  history,\n  isLoggedin,\n  location,\n  match\n}) => {\n  const {\n    user,\n    isLoggedin: Loggedin,\n    Loading,\n    isLoggedinf,\n    setUser,\n    setLoadingf\n  } = useContext(Context);\n  const context = useContext(Context);\n  const token = localStorage.getItem('auth_token');\n  useEffect(() => {\n    if (token) {\n      makeVerifyRequest('get', setUser, isLoggedinf, setLoadingf);\n    } else {\n      isLoggedinf(false);\n      setLoadingf(false);\n    }\n  }, [history.location.pathname]);\n\n  switch (page) {\n    case 'LOGİN':\n      if (Loggedin && isLoggedin) {\n        history.push('/home');\n      } else {\n        return children(context);\n      }\n\n      break;\n\n    case 'ADD_USER':\n      // this is how I control  whether user is allowed to go into  the page or not\n      if (user.role === 'Bayi') {\n        history.push('/home');\n      } else {\n        if (Loggedin || Loading) return children(Loading, user);else history.push('/');\n      }\n\n      break;\n\n    default:\n      if (Loggedin || Loading) {\n        return children(Loading, user);\n      } else {\n        history.push('/');\n      }\n\n      break;\n  }\n\n  return null;\n};\nexport default React.memo(UpdateLoggedin);","map":{"version":3,"sources":["C:/Users/bexfg/Desktop/BOŞ/Study-Online/client/src/Containers/isLoggedin/action.js"],"names":["React","useState","useEffect","useContext","Context","makeVerifyRequest","Redirect","UpdateLoggedin","page","children","history","isLoggedin","location","match","user","Loggedin","Loading","isLoggedinf","setUser","setLoadingf","context","token","localStorage","getItem","pathname","push","role","memo"],"mappings":"AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,EAAiCC,UAAjC,QAAkD,OAAlD;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,SAAQC,iBAAR,QAAgC,uBAAhC;AACA,SAAQC,QAAR,QAAwB,kBAAxB;AAEA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,QAAN;AAAeC,EAAAA,OAAf;AAAuBC,EAAAA,UAAvB;AAAkCC,EAAAA,QAAlC;AAA2CC,EAAAA;AAA3C,CAAD,KAAqD;AAE/E,QAAM;AAACC,IAAAA,IAAD;AAAMH,IAAAA,UAAU,EAACI,QAAjB;AAA0BC,IAAAA,OAA1B;AAAkCC,IAAAA,WAAlC;AAA8CC,IAAAA,OAA9C;AAAsDC,IAAAA;AAAtD,MAAqEhB,UAAU,CAACC,OAAD,CAArF;AACA,QAAMgB,OAAO,GAAGjB,UAAU,CAACC,OAAD,CAA1B;AACA,QAAMiB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AAGArB,EAAAA,SAAS,CAAC,MAAI;AAEV,QAAGmB,KAAH,EACA;AACIhB,MAAAA,iBAAiB,CAAC,KAAD,EAAOa,OAAP,EAAeD,WAAf,EAA2BE,WAA3B,CAAjB;AACH,KAHD,MAKA;AACIF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AAEJ,GAZQ,EAYP,CAACT,OAAO,CAACE,QAAR,CAAiBY,QAAlB,CAZO,CAAT;;AAcA,UAAOhB,IAAP;AAEI,SAAK,OAAL;AAEA,UAAGO,QAAQ,IAAIJ,UAAf,EACA;AACID,QAAAA,OAAO,CAACe,IAAR,CAAa,OAAb;AACH,OAHD,MAKA;AACI,eAAOhB,QAAQ,CAACW,OAAD,CAAf;AACH;;AAED;;AAEA,SAAK,UAAL;AAAsB;AAEtB,UAAGN,IAAI,CAACY,IAAL,KAAc,MAAjB,EACA;AACIhB,QAAAA,OAAO,CAACe,IAAR,CAAa,OAAb;AACH,OAHD,MAKA;AACG,YAAGV,QAAQ,IAAIC,OAAf,EACE,OAAOP,QAAQ,CAACO,OAAD,EAASF,IAAT,CAAf,CADF,KAGEJ,OAAO,CAACe,IAAR,CAAa,GAAb;AACJ;;AAED;;AAEA;AAEI,UAAGV,QAAQ,IAAIC,OAAf,EACA;AACI,eAAOP,QAAQ,CAACO,OAAD,EAASF,IAAT,CAAf;AACH,OAHD,MAKA;AACIJ,QAAAA,OAAO,CAACe,IAAR,CAAa,GAAb;AACH;;AAEL;AA1CJ;;AA4CA,SAAO,IAAP;AACH,CAlEM;AAoEP,eAAezB,KAAK,CAAC2B,IAAN,CAAWpB,cAAX,CAAf","sourcesContent":["import React,{useState,useEffect,useContext} from 'react'\r\nimport {Context} from '../../Context/Context'\r\nimport {makeVerifyRequest} from '../../request/requset'\r\nimport {Redirect}  from 'react-router-dom'\r\n\r\nexport const UpdateLoggedin = ({page,children,history,isLoggedin,location,match})=>{\r\n\r\n    const {user,isLoggedin:Loggedin,Loading,isLoggedinf,setUser,setLoadingf} = useContext(Context)   \r\n    const context = useContext(Context);\r\n    const token = localStorage.getItem('auth_token');\r\n    \r\n\r\n    useEffect(()=>{\r\n        \r\n        if(token)\r\n        {\r\n            makeVerifyRequest('get',setUser,isLoggedinf,setLoadingf);\r\n        }\r\n        else\r\n        {\r\n            isLoggedinf(false);\r\n            setLoadingf(false);\r\n        }\r\n\r\n    },[history.location.pathname])\r\n    \r\n    switch(page)  \r\n    {\r\n        case 'LOGİN':\r\n\r\n        if(Loggedin && isLoggedin)\r\n        {\r\n            history.push('/home');\r\n        }\r\n        else\r\n        {\r\n            return children(context);\r\n        }   \r\n        \r\n        break ; \r\n\r\n        case 'ADD_USER':      // this is how I control  whether user is allowed to go into  the page or not\r\n\r\n        if(user.role === 'Bayi')\r\n        {\r\n            history.push('/home');\r\n        }\r\n        else\r\n        {\r\n           if(Loggedin || Loading)\r\n             return children(Loading,user);\r\n           else\r\n             history.push('/');\r\n        }\r\n\r\n        break;\r\n\r\n        default:\r\n            \r\n            if(Loggedin || Loading)\r\n            {\r\n                return children(Loading,user);\r\n            }\r\n            else\r\n            {\r\n                history.push('/');\r\n            }\r\n\r\n        break;   \r\n    }\r\n    return null;\r\n}\r\n\r\nexport default React.memo(UpdateLoggedin);"]},"metadata":{},"sourceType":"module"}